{"version":3,"sources":["components/NumberButton.js","components/LongButton.js","components/Display.js","components/GuessHistory.js","components/SuccessModal.js","containers/NumberGuess.js","App.js","serviceWorker.js","index.js"],"names":["NumberButton","props","classes","makeStyles","theme","margin","spacing","backgroundColor","useStyles","Button","className","onClick","children","LongButton","padding","box","width","Display","Box","Typography","variant","textAlign","GuessHistory","history","map","guess","index","key","marginBottom","modal","display","alignItems","justifyContent","paper","palette","background","border","boxShadow","shadows","TransitionsModal","guessTimes","answer","open","Modal","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","NumberGuess","useState","inputNumber","setInputNumber","questionContent","setQuestionContent","setHistory","setAnswer","setOpen","setGuessTimes","useEffect","Math","floor","random","handleNumberClick","num","newInputNumber","handlequiestionContentClick","content","Grid","container","item","sm","xs","flexDirection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAIe,SAASA,EAAaC,GACnC,IAMMC,EANYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNA,OAAQD,EAAME,QAAQ,GACtBC,gBAAiB,cAGLC,GAEhB,OACI,6BACE,kBAACC,EAAA,EAAD,CAAQC,UAAWR,EAAQG,OAAQM,QAASV,EAAMU,SAC7CV,EAAMW,WCZJ,SAASC,EAAWZ,GACjC,IAOMC,EAPYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNA,OAAQD,EAAME,QAAQ,GACtBQ,QAASV,EAAME,QAAQ,GACvBC,gBAAiBN,EAAMM,oBAGXC,GAEhB,OACI,6BACE,kBAACC,EAAA,EAAD,CAAQC,UAAWR,EAAQG,OAAQM,QAASV,EAAMU,SAC7CV,EAAMW,W,oBCZbJ,EAAYL,aAAW,SAACC,GAAD,MAAY,CACrCW,IAAK,CACDC,MAAO,OACPX,OAAQ,iBAID,SAASY,EAAQhB,GAC9B,IAAMC,EAAUM,IAEhB,OACI,6BACC,kBAACU,EAAA,EAAD,CAAKR,UAAWR,EAAQa,KACpB,kBAACI,EAAA,EAAD,CAAYC,QAAQ,MACdnB,EAAMW,YCdvB,IAAMJ,EAAYL,aAAW,SAACC,GAAD,MAAY,CACrCW,IAAK,CACDM,UAAW,OACXhB,OAAO,SACPS,QAAQ,cAID,SAASQ,EAAarB,GACnC,IAAMC,EAAUM,IAEVe,EAAUtB,EAAMsB,QAEtB,OACI,6BACE,kBAACJ,EAAA,EAAD,iCACA,kBAACD,EAAA,EAAD,CAAKR,UAAWR,EAAQa,KAEpBQ,EAAQC,KAAI,SAACC,EAAOC,GAAR,OACZ,kBAACR,EAAA,EAAD,CAAKS,IAAKD,EAAOE,aAAa,QAC5B,kBAACT,EAAA,EAAD,CAAYC,QAAQ,MACjBM,EAAM,EADT,MACeD,EAAM,GAAIA,EAAM,GAD/B,MACsCA,EAAM,U,4BClBpDjB,EAAYL,aAAW,SAACC,GAAD,MAAY,CACvCyB,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACL1B,gBAAiBH,EAAM8B,QAAQC,WAAWF,MAC1CG,OAAQ,iBACRC,UAAWjC,EAAMkC,QAAQ,GACzBxB,QAASV,EAAME,QAAQ,EAAG,EAAG,QAIlB,SAASiC,EAAiBtC,GACvC,IAAMC,EAAUM,IACVgC,EAAavC,EAAMuC,WACnBC,EAASxC,EAAMwC,OAEfC,EAAOzC,EAAMyC,KAEnB,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,kBAAgB,yBAChBC,mBAAiB,+BACjBnC,UAAWR,EAAQ2B,MACnBa,KAAMA,EACNI,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,MAGX,kBAACC,EAAA,EAAD,CAAMC,GAAIV,GACR,yBAAKhC,UAAWR,EAAQ+B,OACpB,kBAACf,EAAA,EAAD,CAAKU,aAAa,OAAOyB,GAAG,0BAC1B,kBAAClC,EAAA,EAAD,CAAaC,QAAQ,MAArB,mCAEF,kBAACF,EAAA,EAAD,CAAMmC,GAAG,gCACP,kBAAClC,EAAA,EAAD,CAAYC,QAAQ,MAApB,wCAAiCqB,GACjC,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,MAApB,+DAAoCoB,Q,YCrCrC,SAASc,IAAc,MAEIC,mBAAS,GAFb,mBAE3BC,EAF2B,KAEdC,EAFc,OAGYF,mBAAS,IAHrB,mBAG3BG,EAH2B,KAGVC,EAHU,OAIJJ,mBAAS,IAJL,mBAI3BhC,EAJ2B,KAIlBqC,EAJkB,OAKPL,mBAAS,GALF,mBAK3Bd,EAL2B,KAKpBoB,EALoB,OAMVN,oBAAS,GANC,mBAM3Bb,EAN2B,KAMrBoB,EANqB,OAOEP,mBAAS,GAPX,mBAO3Bf,EAP2B,KAOfuB,EAPe,KAUlCC,qBAAU,WACNH,EAAUI,KAAKC,MAAwB,IAAjBD,KAAKE,UAAqB,KACjD,IAGH,IAAMC,EAAoB,SAACC,GACvB,IAAIC,EAA6B,GAAZd,EAAiBa,EACnCC,GAAkB,GAAKA,GAAkB,KACxCb,EAAea,IAKjBC,EAA8B,SAACC,GAClB,eAAZA,EACCb,EAAmB,8CACD,gBAAZa,EACNb,EAAmB,8CACD,UAAZa,GACNb,EAAmB,6BA2D7B,OACI,6BACI,kBAACzC,EAAA,EAAD,CAAKU,aAAa,QAChB,kBAACT,EAAA,EAAD,CAAYC,QAAQ,MAApB,sBACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,gEAEF,kBAACqD,EAAA,EAAD,CAAMC,WAAS,EAACpE,QAAS,GACrB,kBAACmE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAAC5D,EAAD,KAAUuC,EAAV,IAAwBE,GACxB,kBAACxC,EAAA,EAAD,CAAKY,QAAQ,OAAOgD,cAAc,UAC9B,kBAAC5D,EAAA,EAAD,CAAKY,QAAQ,OAAOE,eAAe,UAC/B,kBAAChC,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,MAEJ,kBAAClD,EAAA,EAAD,CAAKY,QAAQ,OAAOE,eAAe,UAC/B,kBAAChC,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,KACA,kBAACpE,EAAD,CAAcW,QAAS,kBAAMyD,EAAkB,KAA/C,MAEJ,kBAAClD,EAAA,EAAD,CAAKY,QAAQ,OAAOE,eAAe,UAC/B,kBAACnB,EAAD,CAAYF,QAAS,kBAAM4D,EAA4B,eAAehE,gBAAgB,WAAtF,8CACA,kBAACM,EAAD,CAAYF,QAAS,kBAAM4D,EAA4B,gBAAgBhE,gBAAgB,WAAvF,8CACA,kBAACM,EAAD,CAAYF,QAAS,kBAAM4D,EAA4B,UAAUhE,gBAAgB,WAAjF,6BAEJ,kBAACW,EAAA,EAAD,CAAKY,QAAQ,OAAOE,eAAe,UAC/B,kBAACnB,EAAD,CAAYF,QApFP,WACrB8C,EAAe,GACfE,EAAmB,KAkFqCpD,gBAAgB,WAAxD,sBACA,kBAACM,EAAD,CAAYF,QA/EN,WAEC,KAApB+C,IAEHK,EAAcvB,EAAa,GAEJ,+CAApBkB,EAEKE,EAAW,GAAD,mBACHrC,GAFRiC,EAAcf,EACH,CAEN,CAACe,EAAa,6CAAW,iBAGnB,CAEN,CAACA,EAAa,6CAAW,yBAGP,+CAApBE,EAEFE,EAAW,GAAD,mBACHrC,GAFRiC,EAAcf,EACH,CAEN,CAACe,EAAa,6CAAW,iBAGnB,CAEN,CAACA,EAAa,6CAAW,yBAGP,6BAApBE,IACHF,IAAgBf,GACfmB,EAAW,GAAD,mBACHrC,GADG,CAEN,CAACiC,EAAa,2BAAQ,mBAG1BM,GAAQ,IAERF,EAAW,GAAD,mBACHrC,GADG,CAEN,CAACiC,EAAa,2BAAQ,0BAIlCC,EAAe,GACfE,EAAmB,MAiCsCpD,gBAAgB,WAAzD,+BAIV,kBAACkE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACvD,EAAD,CAAcC,QAASA,MAG7B,kBAAC,EAAD,CAAcmB,KAAMA,EAAMF,WAAYA,EAAYC,OAAQA,KC5HrDsC,MAVf,WACE,OACE,yBAAKrE,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC4C,EAAD,SCGY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e8ca050.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nexport default function NumberButton(props) {\n  const useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n      backgroundColor: \"#f48fb1\",\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n      <div>\n        <Button className={classes.margin} onClick={props.onClick}>\n            {props.children}\n        </Button>\n      </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nexport default function LongButton(props) {\n  const useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(2),\n      padding: theme.spacing(1),\n      backgroundColor: props.backgroundColor,\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n      <div>\n        <Button className={classes.margin} onClick={props.onClick}>\n            {props.children}\n        </Button>\n      </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    box: {\n        width: \"100%\",\n        margin: \"10px auto\",\n    },\n  }));\n\nexport default function Display(props) {\n  const classes = useStyles();\n\n  return (\n      <div>\n       <Box className={classes.box}>\n           <Typography variant=\"h3\">\n                {props.children}\n           </Typography>\n       </Box>\n      </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    box: {\n        textAlign: \"left\",\n        margin:\"20px 0\",\n        padding:\"0 20px\"\n    },\n  }));\n\nexport default function GuessHistory(props) {\n  const classes = useStyles();\n\n  const history = props.history;\n\n  return (\n      <div>\n        <Typography>予想履歴</Typography>\n        <Box className={classes.box}>\n          {\n            history.map((guess, index) => \n            <Box key={index} marginBottom=\"10px\">\n              <Typography variant=\"h5\">\n                {index+1}.  {guess[0]}{guess[1]}:  {guess[2]}\n              </Typography>\n            </Box>\n            )\n          }\n        </Box>\n      </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function TransitionsModal(props) {\n  const classes = useStyles();\n  const guessTimes = props.guessTimes;\n  const answer = props.answer;\n\n  const open = props.open\n  \n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper} >\n              <Box marginBottom=\"30px\" id=\"transition-modal-title\">\n                <Typography  variant=\"h4\">正解です！</Typography>\n              </Box>\n              <Box  id=\"transition-modal-description\">\n                <Typography variant=\"h5\">正解の数字:　{answer}</Typography>\n                <Typography variant=\"h5\">正解までの質問数：　{guessTimes}</Typography>\n              </Box>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}","import React, {useState, useEffect} from 'react';\n//components\nimport NumberButton from '../components/NumberButton';\nimport LongButton from '../components/LongButton';\nimport Display from '../components/Display';\nimport GuessHistory from '../components/GuessHistory';\nimport SuccessModal from '../components/SuccessModal';\n//material-ui\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function NumberGuess() {\n    //states\n    const [inputNumber, setInputNumber] = useState(0);\n    const [questionContent, setQuestionContent] = useState(\"\");\n    const [history, setHistory] = useState([]);\n    const [answer,setAnswer] = useState(0);\n    const [open, setOpen] = useState(false);\n    const [guessTimes, setGuessTimes] = useState(0);\n    \n    //ページが読み込まれたときに一度だけ実行させる\n    useEffect(() => {\n        setAnswer(Math.floor( Math.random() * (100) ) + 1);\n    }, [])\n\n    //数字ボタンをクリックしたとき\n    const handleNumberClick = (num) => {\n        let newInputNumber = inputNumber*10 + num;\n        if(newInputNumber >= 1 && newInputNumber <= 100){\n            setInputNumber(newInputNumber);\n        }\n    }\n\n    //予想の内容ボタンをクリックしたとき\n    const handlequiestionContentClick = (content) => {\n        if(content === \"biggerThan\"){\n            setQuestionContent(\"より上ですか？\");\n        } else if(content === \"smallerThan\"){\n            setQuestionContent(\"より下ですか？\");\n        } else if(content === \"exact\"){\n            setQuestionContent(\"ですか？\");\n        }\n    }\n\n    //クリアボタンをクリックしたとき\n    const handleClearClick = () => {\n        setInputNumber(0);\n        setQuestionContent(\"\");\n    }\n\n    //予想ボタンをクリックしたとき\n    const handleSubmitClick = () => {\n        //予想の内容が入力されていない場合はすぐに返す\n        if(questionContent === \"\") return;\n        //予想した回数を1増やす\n        setGuessTimes(guessTimes + 1);\n\n        if(questionContent === \"より上ですか？\"){\n            if(inputNumber < answer){\n                setHistory([\n                    ...history,\n                    [inputNumber, \"より上ですか？\", \"はい\"]\n                ]);\n            } else {\n                setHistory([\n                    ...history,\n                    [inputNumber, \"より上ですか？\", \"いいえ\"]\n                ]);\n            }\n        } else if(questionContent === \"より下ですか？\"){\n            if(inputNumber > answer){\n                setHistory([\n                    ...history,\n                    [inputNumber, \"より下ですか？\", \"はい\"]\n                ]);\n            } else {\n                setHistory([\n                    ...history,\n                    [inputNumber, \"より下ですか？\", \"いいえ\"]\n                ]);\n            }\n        } else if(questionContent === \"ですか？\"){\n            if(inputNumber === answer){\n                setHistory([\n                    ...history,\n                    [inputNumber, \"ですか？\", \"はい\"]\n                ]);\n                //正解の場合にモーダルを開く\n                setOpen(true);\n            } else {\n                setHistory([\n                    ...history,\n                    [inputNumber, \"ですか？\", \"いいえ\"]\n                ]);\n            }\n        }\n        setInputNumber(0);\n        setQuestionContent(\"\");\n    }\n  return (\n      <div>\n          <Box marginBottom=\"20px\">\n            <Typography variant=\"h4\">React Number Guess</Typography>\n            <Typography variant=\"h6\">1~100の数字を予想しよう</Typography>\n          </Box>\n          <Grid container spacing={1}>\n              <Grid item sm={6} xs={12}>\n                <Display>{inputNumber} {questionContent}</Display>\n                <Box display=\"flex\" flexDirection=\"column\">\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <NumberButton onClick={() => handleNumberClick(0)}>0</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(1)}>1</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(2)}>2</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(3)}>3</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(4)}>4</NumberButton>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <NumberButton onClick={() => handleNumberClick(5)}>5</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(6)}>6</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(7)}>7</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(8)}>8</NumberButton>\n                        <NumberButton onClick={() => handleNumberClick(9)}>9</NumberButton>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <LongButton onClick={() => handlequiestionContentClick(\"biggerThan\")} backgroundColor=\"#f48fb1\">より上ですか？</LongButton>\n                        <LongButton onClick={() => handlequiestionContentClick(\"smallerThan\")} backgroundColor=\"#f48fb1\">より下ですか？</LongButton>\n                        <LongButton onClick={() => handlequiestionContentClick(\"exact\")} backgroundColor=\"#f48fb1\">ですか？</LongButton>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <LongButton onClick={handleClearClick}  backgroundColor=\"#bdbdbd\">クリア</LongButton>\n                        <LongButton onClick={handleSubmitClick}  backgroundColor=\"#b2ff59\">予想する</LongButton>\n                    </Box>\n                </Box>\n              </Grid>\n              <Grid item sm={6} xs={12}>\n                <GuessHistory history={history}/>\n              </Grid>\n          </Grid>\n          <SuccessModal open={open} guessTimes={guessTimes} answer={answer}/>\n            \n      </div>\n  );\n}","import React from 'react';\nimport './App.css';\n\nimport NumberGuess from './containers/NumberGuess'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <NumberGuess />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}